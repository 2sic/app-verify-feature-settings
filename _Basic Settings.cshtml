@inherits Custom.Dnn.Razor12
@using DotNetNuke.Framework.JavaScriptLibraries;
@using DotNetNuke.Framework;
@using System.Linq;
@using ToSic.Sxc.Data;

@{ Settings.SetDebug(false); }

<h1 @Edit.Toolbar()>Tests</h1>

<ol>
  <li><a href='@Link.To(parameters: "webresources/true")'>Web Resources</a></li>
  <li><a href='@Link.To(parameters: "images/true")'>Images</a></li>
  <li><a href='@Link.To(parameters: "viewapp/true")'>View-App Stuff</a></li>
  <li><a href='@Link.To(parameters: "linkimg/true")'>Link IMG Stuff</a></li>
  <li><a href='@Link.To(parameters: "dynjson/true")'>Dynamic Json stuff</a></li>
</ol>

<h3>Todo: split into more isolated files for better testing</h3>

<h2>Test page service activate</h2>
@{
  var pageService = GetService<ToSic.Sxc.Web.IPageService>();
  pageService.Activate("fancybox4");
  pageService.Activate("fancybox4");
  // pageService.Activate("fancybox4");
}

<hr>

test
@{

  var resDump = Resources._Dump(null /* new string[] { "en-us"} */, null,  null);


  var viewGuid = (CmsContext.View as ToSic.Eav.Data.Wrapper<ToSic.Sxc.Blocks.IView>).GetContents().Guid;
  var dynEnt = Settings.GetSource("PresetSystem");

  var fullDump = Settings._Dump(null /* new string[] { "en-us"} */, null,  null);


  var presetDump = dynEnt._Dump(new string[] { "en-us"}, null,  null);
}

<h2>Settings Dump</h2>

<script>
  function getStack(target, part) {
    var sxc = $2sxc(target);
    part = part || "Settings";
    sxc.webApi.get('admin/app/getstack?appId=1388&part=' + part + '&view=@viewGuid').then(function(data) {
      console.log('got data', data);
    });
  }
  function getStackKey(target, key) {
    var sxc = $2sxc(target);
    sxc.webApi.get('admin/app/getstack?appId=1388&part=Settings&key=' + key).then(function(data) {
      console.log('got data', data);
    });
  }

</script>

<a onclick="getStack(this)">Load Settings in js</a> - 
<a onclick="getStack(this, 'Resources')">Load Resources in js</a>

<ol>
  @foreach (var prop in fullDump) {
    <li>
      @prop.Path: @prop.Property.Result (@prop.SourceName)
      <a onclick='getStackKey(this, "@prop.Path")'>get more details</a>
    </li>
  }
</ol>

@{
  return;
}

<hr>
View guid: @viewGuid
<br>
EntityId of missing Site-Settings @Settings.GetSource("Site").EntityId

<hr>


Images (override): @Settings.Images.News.Quality <br>

Lightbox (fallback) quality: @Settings.Images.Lightbox.Quality



<div @Edit.TagToolbar(Content)>
    <h1>Re-Test AppSettings</h1>
    App.Settings.Title: @App.Settings.Title <br>
    <h1>Test global settings</h1>
    @{
        var appStates = GetService<ToSic.Eav.Apps.IAppStates>();
        var presetApp = appStates.Get(ToSic.Eav.Constants.PresetIdentity);
    
        var globSet = presetApp.List.First(e => e.Type.Is(ToSic.Eav.Configuration.ConfigurationConstants.Settings.SystemType)); //  ToSic.Eav.Configuration.Global.SystemSettings;
        var dynSet = AsDynamic(globSet);
        Settings.SetDebug(true);
    }
    
    Settings: "@globSet" (should be IEntity) | "@dynSet" (should be IDynamicEntity) | @dynSet.EntityId | @dynSet.GoogleMaps <br>

    Google Maps: @dynSet.GoogleMaps.Count | @dynSet.GoogleMaps.SettingsIdentifier | @dynSet.GoogleMaps.InitialZoom <br>
    
    Settings GoogleMaps: @Settings.GoogleMaps <br>
    


    Settings Zoom: @Settings.GoogleMaps.InitialZoom <br>
    Settings ApiKey: @Settings.GoogleMaps.ApiKey <br>

    Show warning: @Settings.GoogleMaps.ShowApiKeyWarning <br>
    
    <hr>
    
    SiteColor from SiteSettings: @Settings.SiteColor
    
    <hr>
    <h2>QuickEdit</h2>
    
    Settings.QuickEdit: @Settings.QuickEdit <br>
    Settings.QuickEdit.Items: @Settings.QuickEdit.Items <br>

    Settings.QuickEdit.Items.Move (of Default): @Settings.QuickEdit.Items.Move <br>
    
    Settings.QuickEdit.InnerContentDynamic: @Settings.QuickEdit.InnerContentDynamic <br>
    Settings.QuickEdit.InnerContentDynamic.Enable: @Settings.QuickEdit.InnerContentDynamic.Enable <br>

    Settings.QuickEdit.Default: @Settings.QuickEdit.Default <br>
    Settings.QuickEdit.Default.Enable: @Settings.QuickEdit.Default.Enable <br>
    
    Settings.QuickEdit.InnerContentDynamic.Move: @Settings.QuickEdit.InnerContentDynamic.Move <br>
    
    <hr>
    <h3>Foreach Test using property</h3>
    <ol>
    @foreach(var part in Settings.QuickEdit.Items) {
        <li>    @part.EntityTitle </li>
    }
    </ol>
    <h3>Foreach Test using AsList</h3>
    <ol>
    @foreach(var part in AsList(Settings.QuickEdit.Items)) {
        <li>    @part.EntityTitle </li>
    }
    </ol>
  

    
</div>